{"version":3,"sources":["../../src/util/colorUtils.ts"],"names":[],"mappings":";;;;;QASM,U,GAAA,U;QA6BA,Q,GAAA,Q;;;;AA7BA,SAAA,UAAA,CAAsB,KAAtB,EAAoC;AACxC,QAAI,YAAJ;AAEA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAM,KAAN;AACD,KAFD,MAEO,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AACpC,YAAI,IAAI,MAAM,CAAN,MAAa,GAAb,GAAmB,MAAM,SAAN,CAAgB,CAAhB,CAAnB,GAAwC,KAAhD;AACA,YAAI,EAAE,MAAF,KAAa,CAAjB,EAAoB;AAClB,gBAAI,EAAE,KAAF,CAAQ,EAAR,EAAY,GAAZ,CAAgB;AAAA,uBAAQ,OAAO,IAAf;AAAA,aAAhB,EAAqC,IAArC,CAA0C,EAA1C,CAAJ;AACD;AACD,YAAI,EAAE,MAAF,KAAa,CAAjB,EAAoB;AAClB,6CAAgB,KAAhB;AACD;AACD,cAAM,SAAS,CAAT,EAAY,EAAZ,CAAN;AACD,KATM,MASA;AACL,cAAM,IAAI,SAAJ,uDAAiE,SAAS,IAAT,GAAgB,KAAhB,GAAwB,MAAM,WAAN,CAAkB,IAA3G,eAAN;AACD;AAED,QAAI,MAAM,CAAV,EAAa;AACX,oEAA2C,KAA3C;AACA,cAAM,CAAN;AACD,KAHD,MAGO,IAAI,MAAM,QAAN,IAAkB,MAAM,GAAN,CAAtB,EAAkC;AACvC,yCAAgB,KAAhB;AACA,cAAM,QAAN;AACD;AAED,WAAO,GAAP;AACD;AAEK,SAAA,QAAA,CAAoB,KAApB,EAA8B;AAClC,QAAI,WAAmB,MAAM,QAAN,CAAe,EAAf,CAAvB;AAEA,QAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB,WAAW,IAAI,MAAJ,CAAW,IAAI,SAAS,MAAxB,IAAkC,QAA7C;AAEzB,WAAO,MAAM,QAAb;AACD","sourcesContent":["import { consoleWarn } from './console'\n\nexport type RGB = number\nexport type XYZ = [number, number, number]\nexport type LAB = [number, number, number]\n\n// TODO: remove with TS 3.0\ntype unknown = string | number | symbol | boolean | object | null | undefined\n\nexport function colorToInt (color: unknown): RGB {\n  let rgb\n\n  if (typeof color === 'number') {\n    rgb = color\n  } else if (typeof color === 'string') {\n    let c = color[0] === '#' ? color.substring(1) : color\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('')\n    }\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`)\n    }\n    rgb = parseInt(c, 16)\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`)\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`)\n    rgb = 0\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`)\n    rgb = 0xffffff\n  }\n\n  return rgb\n}\n\nexport function intToHex (color: RGB): string {\n  let hexColor: string = color.toString(16)\n\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor\n\n  return '#' + hexColor\n}\n"],"sourceRoot":""}