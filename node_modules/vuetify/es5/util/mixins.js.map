{"version":3,"sources":["../../src/util/mixins.ts"],"names":[],"mappings":";;;;;kBAUc,M;;AATd;;;;;;AASc,SAAA,MAAA,GAA2C;AAAA,sCAAtB,IAAsB;AAAtB,YAAsB;AAAA;;AACvD,WAAO,cAAI,MAAJ,CAAW,EAAE,QAAQ,IAAV,EAAX,CAAP;AACD,C","sourcesContent":["/* eslint-disable max-len, import/export, no-use-before-define */\nimport Vue, { VueConstructor } from 'vue'\n\nexport default function mixins<A extends Vue> (CtorA: VueConstructor<A>): VueConstructor<A>\nexport default function mixins<A extends Vue, B extends Vue> (CtorA: VueConstructor<A>, CtorB: VueConstructor<B>): VueConstructor<A & B>\nexport default function mixins<A extends Vue, B extends Vue, C extends Vue> (CtorA: VueConstructor<A>, CtorB: VueConstructor<B>, CtorC: VueConstructor<C>): VueConstructor<A & B & C>\nexport default function mixins<A extends Vue, B extends Vue, C extends Vue, D extends Vue> (CtorA: VueConstructor<A>, CtorB: VueConstructor<B>, CtorC: VueConstructor<C>, CtorD: VueConstructor<D>): VueConstructor<A & B & C & D>\nexport default function mixins<A extends Vue, B extends Vue, C extends Vue, D extends Vue, E extends Vue> (CtorA: VueConstructor<A>, CtorB: VueConstructor<B>, CtorC: VueConstructor<C>, CtorD: VueConstructor<D>, CtorE: VueConstructor<E>): VueConstructor<A & B & C & D & E>\nexport default function mixins<A extends Vue, B extends Vue, C extends Vue, D extends Vue, E extends Vue, F extends Vue> (CtorA: VueConstructor<A>, CtorB: VueConstructor<B>, CtorC: VueConstructor<C>, CtorD: VueConstructor<D>, CtorE: VueConstructor<E>, CtorF: VueConstructor<F>): VueConstructor<A & B & C & D & E & F>\nexport default function mixins<T extends Vue> (...args: VueConstructor[]): VueConstructor<T>\nexport default function mixins (...args: VueConstructor[]): VueConstructor {\n  return Vue.extend({ mixins: args })\n}\n\n/**\n * Returns the instance type from a VueConstructor\n * Useful for adding types when using mixins().extend()\n */\nexport type ExtractVue<A extends VueConstructor, B extends VueConstructor = VueConstructor, C extends VueConstructor = VueConstructor, D extends VueConstructor = VueConstructor, E extends VueConstructor = VueConstructor, F extends VueConstructor = VueConstructor> = ExtractOne<A> & ExtractOne<B> & ExtractOne<C> & ExtractOne<D> & ExtractOne<E> & ExtractOne<F>\ntype ExtractOne<T extends VueConstructor> = T extends VueConstructor<infer V> ? V : never\n"],"sourceRoot":""}