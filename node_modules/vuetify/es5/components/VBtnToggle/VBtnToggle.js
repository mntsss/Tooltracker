'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

require('../../../src/stylus/components/_button-toggle.styl');

var _mixins = require('../../util/mixins');

var _mixins2 = _interopRequireDefault(_mixins);

var _buttonGroup = require('../../mixins/button-group');

var _buttonGroup2 = _interopRequireDefault(_buttonGroup);

var _themeable = require('../../mixins/themeable');

var _themeable2 = _interopRequireDefault(_themeable);

var _console = require('../../util/console');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* @vue/component */

// Mixins
exports.default = (0, _mixins2.default)(_buttonGroup2.default, _themeable2.default).extend({
    name: 'v-btn-toggle',
    model: {
        prop: 'inputValue',
        event: 'change'
    },
    props: {
        inputValue: {
            required: false
        },
        mandatory: Boolean,
        multiple: Boolean
    },
    computed: {
        classes: function classes() {
            return {
                'v-btn-toggle': true,
                'v-btn-toggle--selected': this.hasValue,
                'theme--light': this.light,
                'theme--dark': this.dark
            };
        },
        hasValue: function hasValue() {
            return this.multiple && this.inputValue.length || !this.multiple && this.inputValue !== null && typeof this.inputValue !== 'undefined';
        }
    },
    watch: {
        inputValue: {
            handler: function handler() {
                this.update();
            },

            deep: true
        }
    },
    created: function created() {
        if (this.multiple && !Array.isArray(this.inputValue)) {
            (0, _console.consoleWarn)('Model must be bound to an array if the multiple property is true.', this);
        }
    },

    methods: {
        isSelected: function isSelected(i) {
            var item = this.getValue(i);
            if (!this.multiple) {
                return this.inputValue === item;
            }
            return this.inputValue.includes(item);
        },
        updateValue: function updateValue(i) {
            var item = this.getValue(i);
            if (!this.multiple) {
                if (this.mandatory && this.inputValue === item) return;
                this.$emit('change', this.inputValue === item ? null : item);
                return;
            }
            var items = this.inputValue.slice();
            var index = items.indexOf(item);
            if (index > -1) {
                if (this.mandatory && items.length === 1) return;
                items.length >= 1 && items.splice(index, 1);
            } else {
                items.push(item);
            }
            this.$emit('change', items);
        },
        updateAllValues: function updateAllValues() {
            if (!this.multiple) return;
            var items = [];
            for (var i = 0; i < this.buttons.length; ++i) {
                var item = this.getValue(i);
                var index = this.inputValue.indexOf(item);
                if (index !== -1) {
                    items.push(item);
                }
            }
            this.$emit('change', items);
        }
    },
    render: function render(h) {
        return h('div', { class: this.classes }, this.$slots.default);
    }
});
// Util
//# sourceMappingURL=VBtnToggle.js.map