'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
// Mixins

// Util


require('../../../src/stylus/components/_icons.styl');

var _themeable = require('../../mixins/themeable');

var _themeable2 = _interopRequireDefault(_themeable);

var _colorable = require('../../mixins/colorable');

var _colorable2 = _interopRequireDefault(_colorable);

var _helpers = require('../../util/helpers');

var _mixins = require('../../util/mixins');

var _mixins2 = _interopRequireDefault(_mixins);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SIZE_MAP;
(function (SIZE_MAP) {
    SIZE_MAP["small"] = "16px";
    SIZE_MAP["default"] = "24px";
    SIZE_MAP["medium"] = "28px";
    SIZE_MAP["large"] = "36px";
    SIZE_MAP["xLarge"] = "40px";
})(SIZE_MAP || (SIZE_MAP = {}));
function isFontAwesome5(iconType) {
    return ['fas', 'far', 'fal', 'fab'].some(function (val) {
        return iconType.includes(val);
    });
}
var ICONS_PREFIX = '$vuetify.icons.';
// This remaps internal names like '$vuetify.icons.cancel' to the current name
// for that icon. Note the parent component is needed for $vuetify because
// VIcon is a functional component. This function only looks at the
// immediate parent, so it won't remap for a nested functional components.
function remapInternalIcon(parent, iconName) {
    if (!iconName.startsWith(ICONS_PREFIX)) {
        // return original icon name unchanged
        return iconName;
    }
    // Now look up icon indirection name, e.g. '$vuetify.icons.cancel':
    return (0, _helpers.getObjectValueByPath)(parent, iconName) || iconName;
}
var addTextColorClassChecks = _colorable2.default.options.methods.addTextColorClassChecks;
/* @vue/component */
exports.default = (0, _mixins2.default)(_colorable2.default, _themeable2.default).extend({
    name: 'v-icon',
    functional: true,
    props: {
        // TODO: inherit these
        color: String,
        dark: Boolean,
        light: Boolean,
        disabled: Boolean,
        large: Boolean,
        left: Boolean,
        medium: Boolean,
        right: Boolean,
        size: {
            type: [Number, String]
        },
        small: Boolean,
        xLarge: Boolean
    },
    render: function render(h, _ref) {
        var props = _ref.props,
            data = _ref.data,
            parent = _ref.parent,
            _ref$listeners = _ref.listeners,
            listeners = _ref$listeners === undefined ? {} : _ref$listeners,
            _ref$children = _ref.children,
            children = _ref$children === undefined ? [] : _ref$children;
        var small = props.small,
            medium = props.medium,
            large = props.large,
            xLarge = props.xLarge;

        var sizes = { small: small, medium: medium, large: large, xLarge: xLarge };
        var explicitSize = (0, _helpers.keys)(sizes).find(function (key) {
            return sizes[key] && !!key;
        });
        var fontSize = explicitSize && SIZE_MAP[explicitSize] || (0, _helpers.convertToUnit)(props.size);
        var newChildren = [];
        if (fontSize) data.style = _extends({ fontSize: fontSize }, data.style);
        var iconName = '';
        if (children.length) iconName = children[0].text;
        // Support usage of v-text and v-html
        else if (data.domProps) {
                iconName = data.domProps.textContent || data.domProps.innerHTML || iconName;
                // Remove nodes so it doesn't
                // overwrite our changes
                delete data.domProps.textContent;
                delete data.domProps.innerHTML;
            }
        // Remap internal names like '$vuetify.icons.cancel' to the current name for that icon
        iconName = remapInternalIcon(parent, iconName);
        var iconType = 'material-icons';
        // Material Icon delimiter is _
        // https://material.io/icons/
        var delimiterIndex = iconName.indexOf('-');
        var isCustomIcon = delimiterIndex > -1;
        if (isCustomIcon) {
            iconType = iconName.slice(0, delimiterIndex);
            if (isFontAwesome5(iconType)) iconType = '';
            // Assume if not a custom icon
            // is Material Icon font
        } else newChildren.push(iconName);
        data.attrs = data.attrs || {};
        if (!('aria-hidden' in data.attrs)) {
            data.attrs['aria-hidden'] = true;
        }
        var classes = _extends({}, props.color && addTextColorClassChecks.call(props, {}, props.color), {
            'v-icon--disabled': props.disabled,
            'v-icon--left': props.left,
            'v-icon--link': listeners.click || listeners['!click'],
            'v-icon--right': props.right,
            'theme--dark': props.dark,
            'theme--light': props.light
        });
        // Order classes
        // * Component class
        // * Vuetify classes
        // * Icon Classes
        data.staticClass = ['v-icon', data.staticClass, Object.keys(classes).filter(function (k) {
            return classes[k];
        }).join(' '), iconType, isCustomIcon ? iconName : null].filter(function (val) {
            return !!val;
        }).join(' ').trim();
        return h('i', data, newChildren);
    }
});
//# sourceMappingURL=VIcon.js.map