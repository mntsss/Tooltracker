{"version":3,"sources":["../../../src/components/VBottomNav/VBottomNav.ts"],"names":[],"mappings":";;;;;;AACA;;AAGA;;;;AACA;;;;AACA;;;;AAGA;;;;;;AANA;kBAYe,sBACb,+BAAgB,QAAhB,EAA0B,CACxB,QADwB,EAExB,OAFwB,CAA1B,CADa,EAKb,qBALa,EAMb;AACA;AAPa,EAQb,MARa,CAQN;AACP,UAAM,cADC;AAGP,WAAO;AACL,gBAAQ,CAAC,MAAD,EAAS,MAAT,CADH;AAEL,gBAAQ;AACN,qBAAS,EADH;AAEN,kBAAM,CAAC,MAAD,EAAS,MAAT,CAFA;AAGN,uBAAW,mBAAC,CAAD;AAAA,uBAAiC,CAAC,MAAM,SAAS,CAAT,CAAN,CAAlC;AAAA;AAHL,SAFH;AAOL,eAAO,OAPF;AAQL,eAAO;AARF,KAHA;AAcP,cAAU;AACR,eADQ,qBACD;AACL,mBAAO;AACL,0CAA0B,KAAK,QAD1B;AAEL,uCAAuB,CAAC,KAAK,QAAN,KAAmB,KAAK,GAAL,IAAY,KAAK,KAApC,CAFlB;AAGL,uCAAuB,KAAK,KAHvB;AAIL,wCAAwB,KAAK;AAJxB,aAAP;AAMD,SARO;AASR,sBATQ,4BASM;AACZ,mBAAO,SAAS,KAAK,MAAd,CAAP;AACD;AAXO,KAdH;AA4BP,WAAO;AACL,cADK,oBACC;AACJ,iBAAK,MAAL;AACD;AAHI,KA5BA;AAkCP,aAAS;AACP,kBADO,sBACK,CADL,EACc;AACnB,gBAAM,OAAO,KAAK,QAAL,CAAc,CAAd,CAAb;AACA,mBAAO,KAAK,MAAL,KAAgB,IAAvB;AACD,SAJM;AAKP,yBALO,+BAKU;AACf,mBAAO,CAAC,KAAK,KAAN,GACH,CADG,GAEH,KAAK,cAFT;AAGD,SATM;AAUP,mBAVO,uBAUM,CAVN,EAUe;AACpB,gBAAM,OAAO,KAAK,QAAL,CAAc,CAAd,CAAb;AAEA,iBAAK,KAAL,CAAW,eAAX,EAA4B,IAA5B;AACD;AAdM,KAlCF;AAmDP,UAnDO,kBAmDC,CAnDD,EAmDE;AACP,eAAO,EAAE,KAAF,EAAS;AACd,yBAAa,cADC;AAEd,mBAAO,KAAK,6BAAL,CAAmC,KAAK,OAAxC,CAFO;AAGd,mBAAO;AACL,wBAAW,SAAS,KAAK,cAAd,CAAX;AADK,aAHO;AAMd,iBAAK;AANS,SAAT,EAOJ,KAAK,MAAL,CAAY,OAPR,CAAP;AAQD;AA5DM,CARM,C;AAPf","sourcesContent":["// Styles\nimport '../../stylus/components/_bottom-navs.styl'\n\n// Mixins\nimport Applicationable from '../../mixins/applicationable'\nimport ButtonGroup from '../../mixins/button-group'\nimport Colorable from '../../mixins/colorable'\n\n// Util\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nexport default mixins(\n  Applicationable('bottom', [\n    'height',\n    'value'\n  ]),\n  ButtonGroup,\n  Colorable\n  /* @vue/component */\n).extend({\n  name: 'v-bottom-nav',\n\n  props: {\n    active: [Number, String],\n    height: {\n      default: 56,\n      type: [Number, String],\n      validator: (v: string | number): boolean => !isNaN(parseInt(v))\n    },\n    shift: Boolean,\n    value: null as any as PropValidator<any>\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-bottom-nav--absolute': this.absolute,\n        'v-bottom-nav--fixed': !this.absolute && (this.app || this.fixed),\n        'v-bottom-nav--shift': this.shift,\n        'v-bottom-nav--active': this.value\n      }\n    },\n    computedHeight (): number {\n      return parseInt(this.height)\n    }\n  },\n\n  watch: {\n    active () {\n      this.update()\n    }\n  },\n\n  methods: {\n    isSelected (i: number): boolean {\n      const item = this.getValue(i)\n      return this.active === item\n    },\n    updateApplication (): number {\n      return !this.value\n        ? 0\n        : this.computedHeight\n    },\n    updateValue (i: number) {\n      const item = this.getValue(i)\n\n      this.$emit('update:active', item)\n    }\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-bottom-nav',\n      class: this.addBackgroundColorClassChecks(this.classes),\n      style: {\n        height: `${parseInt(this.computedHeight)}px`\n      },\n      ref: 'content'\n    }, this.$slots.default)\n  }\n})\n"],"sourceRoot":""}