{"version":3,"sources":["../../../src/components/VAlert/VAlert.ts"],"names":[],"mappings":";;;;;;AACA;;AAGA;;;;AAGA;;;;AACA;;;;AACA;;;;AAIA;;;;;;AAEA;;AATA;;kBAUe,sBAAO,mBAAP,EAAkB,oBAAlB,EAA8B,wBAA9B,EAA8C,MAA9C,CAAqD;AAClE,UAAM,SAD4D;AAGlE,WAAO;AACL,qBAAa,OADR;AAEL,cAAM,MAFD;AAGL,iBAAS,OAHJ;AAIL,cAAM;AACJ,kBAAM,MADF;AAEJ,qBAFI,qBAEO,GAFP,EAEkB;AACpB,uBAAO,CACL,MADK,EAEL,OAFK,EAGL,SAHK,EAIL,SAJK,EAKL,QALK,CAKI,GALJ,CAAP;AAMD;AATG;AAJD,KAH2D;AAoBlE,UAAM;AAAA,eAAO;AACX,0BAAc;AADH,SAAP;AAAA,KApB4D;AAwBlE,cAAU;AACR,eADQ,qBACD;AACL,gBAAM,QAAS,KAAK,IAAL,IAAa,CAAC,KAAK,KAApB,GAA6B,KAAK,IAAlC,GAAyC,KAAK,aAA5D;AACA,gBAAM,UAAU;AACd,oCAAoB,KAAK;AADX,aAAhB;AAIA,mBAAO,KAAK,OAAL,GAAe,KAAK,uBAAL,CAA6B,OAA7B,EAAsC,KAAtC,CAAf,GACH,KAAK,6BAAL,CAAmC,OAAnC,EAA4C,KAA5C,CADJ;AAED,SATO;AAUR,oBAVQ,0BAUI;AACV,gBAAI,KAAK,IAAL,IAAa,CAAC,KAAK,IAAvB,EAA6B,OAAO,KAAK,IAAZ;AAE7B,oBAAQ,KAAK,IAAb;AACE,qBAAK,MAAL;AAAa,2BAAO,qBAAP;AACb,qBAAK,OAAL;AAAc,2BAAO,sBAAP;AACd,qBAAK,SAAL;AAAgB,2BAAO,wBAAP;AAChB,qBAAK,SAAL;AAAgB,2BAAO,wBAAP;AAJlB;AAMD;AAnBO,KAxBwD;AA8ClE,UA9CkE,kBA8C1D,CA9C0D,EA8CzD;AAAA;;AACP,YAAM,WAAW,CAAC,EAAE,KAAF,EAAS,KAAK,MAAL,CAAY,OAArB,CAAD,CAAjB;AAEA,YAAI,KAAK,YAAT,EAAuB;AACrB,qBAAS,OAAT,CAAiB,EAAE,eAAF,EAAS;AACxB,yBAAS;AADe,aAAT,EAEd,KAAK,YAFS,CAAjB;AAGD;AAED,YAAI,KAAK,WAAT,EAAsB;AACpB,gBAAM,QAAQ,EAAE,GAAF,EAAO;AACnB,yBAAS,sBADU;AAEnB,oBAAI,EAAE,OAAO,iBAAK;AAAG,8BAAK,QAAL,GAAgB,KAAhB;AAAuB,qBAAxC;AAFe,aAAP,EAGX,CACD,EAAE,eAAF,EAAS;AACP,uBAAO;AACL,2BAAO;AADF;AADA,aAAT,EAIG,uBAJH,CADC,CAHW,CAAd;AAWA,qBAAS,IAAT,CAAc,KAAd;AACD;AAED,YAAM,QAAQ,EAAE,KAAF,EAAS;AACrB,yBAAa,SADQ;AAErB,qBAAS,KAAK,OAFO;AAGrB,wBAAY,CAAC;AACX,sBAAM,MADK;AAEX,uBAAO,KAAK;AAFD,aAAD,CAHS;AAOrB,gBAAI,KAAK;AAPY,SAAT,EAQX,QARW,CAAd;AAUA,YAAI,CAAC,KAAK,UAAV,EAAsB,OAAO,KAAP;AAEtB,eAAO,EAAE,YAAF,EAAgB;AACrB,mBAAO;AACL,sBAAM,KAAK,UADN;AAEL,wBAAQ,KAAK,MAFR;AAGL,sBAAM,KAAK;AAHN;AADc,SAAhB,EAMJ,CAAC,KAAD,CANI,CAAP;AAOD;AAzFiE,CAArD,C;AAbf","sourcesContent":["// Styles\nimport '../../stylus/components/_alerts.styl'\n\n// Components\nimport VIcon from '../VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport Toggleable from '../../mixins/toggleable'\nimport Transitionable from '../../mixins/transitionable'\n\n// Types\nimport { VNode } from 'vue/types'\nimport mixins from '../../util/mixins'\n\n/* @vue/component */\nexport default mixins(Colorable, Toggleable, Transitionable).extend({\n  name: 'v-alert',\n\n  props: {\n    dismissible: Boolean,\n    icon: String,\n    outline: Boolean,\n    type: {\n      type: String,\n      validator (val: string) {\n        return [\n          'info',\n          'error',\n          'success',\n          'warning'\n        ].includes(val)\n      }\n    }\n  },\n\n  data: () => ({\n    defaultColor: 'error'\n  }),\n\n  computed: {\n    classes (): object {\n      const color = (this.type && !this.color) ? this.type : this.computedColor\n      const classes = {\n        'v-alert--outline': this.outline\n      }\n\n      return this.outline ? this.addTextColorClassChecks(classes, color)\n        : this.addBackgroundColorClassChecks(classes, color)\n    },\n    computedIcon (): string | void {\n      if (this.icon || !this.type) return this.icon\n\n      switch (this.type) {\n        case 'info': return '$vuetify.icons.info'\n        case 'error': return '$vuetify.icons.error'\n        case 'success': return '$vuetify.icons.success'\n        case 'warning': return '$vuetify.icons.warning'\n      }\n    }\n  },\n\n  render (h): VNode {\n    const children = [h('div', this.$slots.default)]\n\n    if (this.computedIcon) {\n      children.unshift(h(VIcon, {\n        'class': 'v-alert__icon'\n      }, this.computedIcon))\n    }\n\n    if (this.dismissible) {\n      const close = h('a', {\n        'class': 'v-alert__dismissible',\n        on: { click: () => { this.isActive = false } }\n      }, [\n        h(VIcon, {\n          props: {\n            right: true\n          }\n        }, '$vuetify.icons.cancel')\n      ])\n\n      children.push(close)\n    }\n\n    const alert = h('div', {\n      staticClass: 'v-alert',\n      'class': this.classes,\n      directives: [{\n        name: 'show',\n        value: this.isActive\n      }] as any,\n      on: this.$listeners\n    }, children)\n\n    if (!this.transition) return alert\n\n    return h('transition', {\n      props: {\n        name: this.transition,\n        origin: this.origin,\n        mode: this.mode\n      }\n    }, [alert])\n  }\n})\n"],"sourceRoot":""}